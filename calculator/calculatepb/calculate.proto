syntax = "proto3";

package calculator;
option go_package="claculatepb";

message CalcRequest{
  int32 num1 = 1;
  int32 num2 = 2;
}

message CalcResponse{
  int32 result = 1;
}

message PrimeNumberDecompositionRequest{
  int64 number = 1;
}

message PrimeNumberDecompositionResponse {
  int64 factor = 1;
}

message CalculateAverageRequest{
  int32 number = 1;
}

message CalculateAverageResponse{
  double response = 1;
}

message FindMaximumRequest{
  int32 number = 1;
}

message FindMaximumResponse{
  int32 maximum = 1;
}

message SquareRootRequest{
  double number = 1;
}

message SquareRootResponse{
  double root = 1;
}

service CalculatorService {
  // Unary API
  rpc Sum (CalcRequest) returns (CalcResponse) {};

  // Server streaming API
  rpc PrimeNumberDecomposition (PrimeNumberDecompositionRequest) returns (stream PrimeNumberDecompositionResponse) {};

  // Client Streaming API
  rpc ComputeAverage (stream CalculateAverageRequest) returns (CalculateAverageResponse) {};

  // Bi-directional Streaming API
  rpc FindMaximum (stream FindMaximumRequest) returns (stream FindMaximumResponse) {};

  // Unary API: gRPC error handling implementation
  // throws an error when negative number is given
  // error is of type INVALID_ARGUMENT
  rpc SquareRoot (SquareRootRequest) returns (SquareRootResponse) {};
}